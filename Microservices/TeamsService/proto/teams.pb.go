// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.2
// source: teams.proto

package teamspb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TwoTeamsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Team1 string `protobuf:"bytes,1,opt,name=team1,proto3" json:"team1,omitempty"`
	Team2 string `protobuf:"bytes,2,opt,name=team2,proto3" json:"team2,omitempty"`
	Year  int32  `protobuf:"varint,3,opt,name=year,proto3" json:"year,omitempty"`
}

func (x *TwoTeamsRequest) Reset() {
	*x = TwoTeamsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TwoTeamsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TwoTeamsRequest) ProtoMessage() {}

func (x *TwoTeamsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teams_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TwoTeamsRequest.ProtoReflect.Descriptor instead.
func (*TwoTeamsRequest) Descriptor() ([]byte, []int) {
	return file_teams_proto_rawDescGZIP(), []int{0}
}

func (x *TwoTeamsRequest) GetTeam1() string {
	if x != nil {
		return x.Team1
	}
	return ""
}

func (x *TwoTeamsRequest) GetTeam2() string {
	if x != nil {
		return x.Team2
	}
	return ""
}

func (x *TwoTeamsRequest) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

type AllTeamsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartYear int32 `protobuf:"varint,1,opt,name=startYear,proto3" json:"startYear,omitempty"`
	EndYear   int32 `protobuf:"varint,2,opt,name=endYear,proto3" json:"endYear,omitempty"`
}

func (x *AllTeamsRequest) Reset() {
	*x = AllTeamsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllTeamsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllTeamsRequest) ProtoMessage() {}

func (x *AllTeamsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teams_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllTeamsRequest.ProtoReflect.Descriptor instead.
func (*AllTeamsRequest) Descriptor() ([]byte, []int) {
	return file_teams_proto_rawDescGZIP(), []int{1}
}

func (x *AllTeamsRequest) GetStartYear() int32 {
	if x != nil {
		return x.StartYear
	}
	return 0
}

func (x *AllTeamsRequest) GetEndYear() int32 {
	if x != nil {
		return x.EndYear
	}
	return 0
}

type TwoTeamsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Team1 *Team `protobuf:"bytes,1,opt,name=team1,proto3" json:"team1,omitempty"`
	Team2 *Team `protobuf:"bytes,2,opt,name=team2,proto3" json:"team2,omitempty"`
}

func (x *TwoTeamsResponse) Reset() {
	*x = TwoTeamsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TwoTeamsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TwoTeamsResponse) ProtoMessage() {}

func (x *TwoTeamsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teams_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TwoTeamsResponse.ProtoReflect.Descriptor instead.
func (*TwoTeamsResponse) Descriptor() ([]byte, []int) {
	return file_teams_proto_rawDescGZIP(), []int{2}
}

func (x *TwoTeamsResponse) GetTeam1() *Team {
	if x != nil {
		return x.Team1
	}
	return nil
}

func (x *TwoTeamsResponse) GetTeam2() *Team {
	if x != nil {
		return x.Team2
	}
	return nil
}

type AllTeamsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*TotalTeamData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *AllTeamsResponse) Reset() {
	*x = AllTeamsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllTeamsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllTeamsResponse) ProtoMessage() {}

func (x *AllTeamsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teams_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllTeamsResponse.ProtoReflect.Descriptor instead.
func (*AllTeamsResponse) Descriptor() ([]byte, []int) {
	return file_teams_proto_rawDescGZIP(), []int{3}
}

func (x *AllTeamsResponse) GetData() []*TotalTeamData {
	if x != nil {
		return x.Data
	}
	return nil
}

type Team struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name             string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Year             float32 `protobuf:"fixed32,3,opt,name=year,proto3" json:"year,omitempty"`
	G                float32 `protobuf:"fixed32,4,opt,name=g,proto3" json:"g,omitempty"`
	Mp               float32 `protobuf:"fixed32,5,opt,name=mp,proto3" json:"mp,omitempty"`
	Fg               float32 `protobuf:"fixed32,6,opt,name=fg,proto3" json:"fg,omitempty"`
	Fga              float32 `protobuf:"fixed32,7,opt,name=fga,proto3" json:"fga,omitempty"`
	FgPct            float32 `protobuf:"fixed32,8,opt,name=fg_pct,json=fgPct,proto3" json:"fg_pct,omitempty"`
	Fg3              float32 `protobuf:"fixed32,9,opt,name=fg3,proto3" json:"fg3,omitempty"`
	Fg3A             float32 `protobuf:"fixed32,10,opt,name=fg3a,proto3" json:"fg3a,omitempty"`
	Fg3Pct           float32 `protobuf:"fixed32,11,opt,name=fg3_pct,json=fg3Pct,proto3" json:"fg3_pct,omitempty"`
	Fg2              float32 `protobuf:"fixed32,12,opt,name=fg2,proto3" json:"fg2,omitempty"`
	Fg2A             float32 `protobuf:"fixed32,13,opt,name=fg2a,proto3" json:"fg2a,omitempty"`
	Fg2Pct           float32 `protobuf:"fixed32,14,opt,name=fg2_pct,json=fg2Pct,proto3" json:"fg2_pct,omitempty"`
	Ft               float32 `protobuf:"fixed32,15,opt,name=ft,proto3" json:"ft,omitempty"`
	Fta              float32 `protobuf:"fixed32,16,opt,name=fta,proto3" json:"fta,omitempty"`
	FtPct            float32 `protobuf:"fixed32,17,opt,name=ft_pct,json=ftPct,proto3" json:"ft_pct,omitempty"`
	Orb              float32 `protobuf:"fixed32,18,opt,name=orb,proto3" json:"orb,omitempty"`
	Drb              float32 `protobuf:"fixed32,19,opt,name=drb,proto3" json:"drb,omitempty"`
	Trb              float32 `protobuf:"fixed32,20,opt,name=trb,proto3" json:"trb,omitempty"`
	Ast              float32 `protobuf:"fixed32,21,opt,name=ast,proto3" json:"ast,omitempty"`
	Stl              float32 `protobuf:"fixed32,22,opt,name=stl,proto3" json:"stl,omitempty"`
	Blk              float32 `protobuf:"fixed32,23,opt,name=blk,proto3" json:"blk,omitempty"`
	Tov              float32 `protobuf:"fixed32,24,opt,name=tov,proto3" json:"tov,omitempty"`
	Pf               float32 `protobuf:"fixed32,25,opt,name=pf,proto3" json:"pf,omitempty"`
	Pts              float32 `protobuf:"fixed32,26,opt,name=pts,proto3" json:"pts,omitempty"`
	OppFg            float32 `protobuf:"fixed32,27,opt,name=opp_fg,json=oppFg,proto3" json:"opp_fg,omitempty"`
	OppFga           float32 `protobuf:"fixed32,28,opt,name=opp_fga,json=oppFga,proto3" json:"opp_fga,omitempty"`
	OppFgPct         float32 `protobuf:"fixed32,29,opt,name=opp_fg_pct,json=oppFgPct,proto3" json:"opp_fg_pct,omitempty"`
	OppFg3           float32 `protobuf:"fixed32,30,opt,name=opp_fg3,json=oppFg3,proto3" json:"opp_fg3,omitempty"`
	OppFg3A          float32 `protobuf:"fixed32,31,opt,name=opp_fg3a,json=oppFg3a,proto3" json:"opp_fg3a,omitempty"`
	OppFg3Pct        float32 `protobuf:"fixed32,32,opt,name=opp_fg3_pct,json=oppFg3Pct,proto3" json:"opp_fg3_pct,omitempty"`
	OppFg2           float32 `protobuf:"fixed32,33,opt,name=opp_fg2,json=oppFg2,proto3" json:"opp_fg2,omitempty"`
	OppFg2A          float32 `protobuf:"fixed32,34,opt,name=opp_fg2a,json=oppFg2a,proto3" json:"opp_fg2a,omitempty"`
	OppFg2Pct        float32 `protobuf:"fixed32,35,opt,name=opp_fg2_pct,json=oppFg2Pct,proto3" json:"opp_fg2_pct,omitempty"`
	OppFt            float32 `protobuf:"fixed32,36,opt,name=opp_ft,json=oppFt,proto3" json:"opp_ft,omitempty"`
	OppFta           float32 `protobuf:"fixed32,37,opt,name=opp_fta,json=oppFta,proto3" json:"opp_fta,omitempty"`
	OppFtPct         float32 `protobuf:"fixed32,38,opt,name=opp_ft_pct,json=oppFtPct,proto3" json:"opp_ft_pct,omitempty"`
	OppOrb           float32 `protobuf:"fixed32,39,opt,name=opp_orb,json=oppOrb,proto3" json:"opp_orb,omitempty"`
	OppDrb           float32 `protobuf:"fixed32,40,opt,name=opp_drb,json=oppDrb,proto3" json:"opp_drb,omitempty"`
	OppTrb           float32 `protobuf:"fixed32,41,opt,name=opp_trb,json=oppTrb,proto3" json:"opp_trb,omitempty"`
	OppAst           float32 `protobuf:"fixed32,42,opt,name=opp_ast,json=oppAst,proto3" json:"opp_ast,omitempty"`
	OppStl           float32 `protobuf:"fixed32,43,opt,name=opp_stl,json=oppStl,proto3" json:"opp_stl,omitempty"`
	OppBlk           float32 `protobuf:"fixed32,44,opt,name=opp_blk,json=oppBlk,proto3" json:"opp_blk,omitempty"`
	OppTov           float32 `protobuf:"fixed32,45,opt,name=opp_tov,json=oppTov,proto3" json:"opp_tov,omitempty"`
	OppPf            float32 `protobuf:"fixed32,46,opt,name=opp_pf,json=oppPf,proto3" json:"opp_pf,omitempty"`
	OppPts           float32 `protobuf:"fixed32,47,opt,name=opp_pts,json=oppPts,proto3" json:"opp_pts,omitempty"`
	Age              float32 `protobuf:"fixed32,48,opt,name=age,proto3" json:"age,omitempty"`
	Wins             float32 `protobuf:"fixed32,49,opt,name=wins,proto3" json:"wins,omitempty"`
	Losses           float32 `protobuf:"fixed32,50,opt,name=losses,proto3" json:"losses,omitempty"`
	WinsPyth         float32 `protobuf:"fixed32,51,opt,name=wins_pyth,json=winsPyth,proto3" json:"wins_pyth,omitempty"`
	LossesPyth       float32 `protobuf:"fixed32,52,opt,name=losses_pyth,json=lossesPyth,proto3" json:"losses_pyth,omitempty"`
	Mov              float32 `protobuf:"fixed32,53,opt,name=mov,proto3" json:"mov,omitempty"`
	Sos              float32 `protobuf:"fixed32,54,opt,name=sos,proto3" json:"sos,omitempty"`
	Srs              float32 `protobuf:"fixed32,55,opt,name=srs,proto3" json:"srs,omitempty"`
	OffRtg           float32 `protobuf:"fixed32,56,opt,name=off_rtg,json=offRtg,proto3" json:"off_rtg,omitempty"`
	DefRtg           float32 `protobuf:"fixed32,57,opt,name=def_rtg,json=defRtg,proto3" json:"def_rtg,omitempty"`
	NetRtg           float32 `protobuf:"fixed32,58,opt,name=net_rtg,json=netRtg,proto3" json:"net_rtg,omitempty"`
	Pace             float32 `protobuf:"fixed32,59,opt,name=pace,proto3" json:"pace,omitempty"`
	FtaPerFgaPct     float32 `protobuf:"fixed32,60,opt,name=fta_per_fga_pct,json=ftaPerFgaPct,proto3" json:"fta_per_fga_pct,omitempty"`
	Fg3APerFgaPct    float32 `protobuf:"fixed32,61,opt,name=fg3a_per_fga_pct,json=fg3aPerFgaPct,proto3" json:"fg3a_per_fga_pct,omitempty"`
	TsPct            float32 `protobuf:"fixed32,62,opt,name=ts_pct,json=tsPct,proto3" json:"ts_pct,omitempty"`
	EfgPct           float32 `protobuf:"fixed32,63,opt,name=efg_pct,json=efgPct,proto3" json:"efg_pct,omitempty"`
	TovPct           float32 `protobuf:"fixed32,64,opt,name=tov_pct,json=tovPct,proto3" json:"tov_pct,omitempty"`
	OrbPct           float32 `protobuf:"fixed32,65,opt,name=orb_pct,json=orbPct,proto3" json:"orb_pct,omitempty"`
	FtRate           float32 `protobuf:"fixed32,66,opt,name=ft_rate,json=ftRate,proto3" json:"ft_rate,omitempty"`
	OppEfgPct        float32 `protobuf:"fixed32,67,opt,name=opp_efg_pct,json=oppEfgPct,proto3" json:"opp_efg_pct,omitempty"`
	OppTovPct        float32 `protobuf:"fixed32,68,opt,name=opp_tov_pct,json=oppTovPct,proto3" json:"opp_tov_pct,omitempty"`
	DrbPct           float32 `protobuf:"fixed32,69,opt,name=drb_pct,json=drbPct,proto3" json:"drb_pct,omitempty"`
	OppFtRate        float32 `protobuf:"fixed32,70,opt,name=opp_ft_rate,json=oppFtRate,proto3" json:"opp_ft_rate,omitempty"`
	AvgDist          float32 `protobuf:"fixed32,71,opt,name=avg_dist,json=avgDist,proto3" json:"avg_dist,omitempty"`
	PctFgaFg2A       float32 `protobuf:"fixed32,72,opt,name=pct_fga_fg2a,json=pctFgaFg2a,proto3" json:"pct_fga_fg2a,omitempty"`
	PctFga_00_03     float32 `protobuf:"fixed32,73,opt,name=pct_fga_00_03,json=pctFga0003,proto3" json:"pct_fga_00_03,omitempty"`
	PctFga_03_10     float32 `protobuf:"fixed32,74,opt,name=pct_fga_03_10,json=pctFga0310,proto3" json:"pct_fga_03_10,omitempty"`
	PctFga_10_16     float32 `protobuf:"fixed32,75,opt,name=pct_fga_10_16,json=pctFga1016,proto3" json:"pct_fga_10_16,omitempty"`
	PctFga_16Xx      float32 `protobuf:"fixed32,76,opt,name=pct_fga_16_xx,json=pctFga16Xx,proto3" json:"pct_fga_16_xx,omitempty"`
	PctFgaFg3A       float32 `protobuf:"fixed32,77,opt,name=pct_fga_fg3a,json=pctFgaFg3a,proto3" json:"pct_fga_fg3a,omitempty"`
	FgPct_00_03      float32 `protobuf:"fixed32,78,opt,name=fg_pct_00_03,json=fgPct0003,proto3" json:"fg_pct_00_03,omitempty"`
	FgPct_03_10      float32 `protobuf:"fixed32,79,opt,name=fg_pct_03_10,json=fgPct0310,proto3" json:"fg_pct_03_10,omitempty"`
	FgPct_10_16      float32 `protobuf:"fixed32,80,opt,name=fg_pct_10_16,json=fgPct1016,proto3" json:"fg_pct_10_16,omitempty"`
	FgPct_16Xx       float32 `protobuf:"fixed32,81,opt,name=fg_pct_16_xx,json=fgPct16Xx,proto3" json:"fg_pct_16_xx,omitempty"`
	PctAstFg2        float32 `protobuf:"fixed32,82,opt,name=pct_ast_fg2,json=pctAstFg2,proto3" json:"pct_ast_fg2,omitempty"`
	PctAstFg3        float32 `protobuf:"fixed32,83,opt,name=pct_ast_fg3,json=pctAstFg3,proto3" json:"pct_ast_fg3,omitempty"`
	PctFgaDunk       float32 `protobuf:"fixed32,84,opt,name=pct_fga_dunk,json=pctFgaDunk,proto3" json:"pct_fga_dunk,omitempty"`
	FgDunk           float32 `protobuf:"fixed32,85,opt,name=fg_dunk,json=fgDunk,proto3" json:"fg_dunk,omitempty"`
	PctFgaLayup      float32 `protobuf:"fixed32,86,opt,name=pct_fga_layup,json=pctFgaLayup,proto3" json:"pct_fga_layup,omitempty"`
	FgLayup          float32 `protobuf:"fixed32,87,opt,name=fg_layup,json=fgLayup,proto3" json:"fg_layup,omitempty"`
	PctFg3ACorner    float32 `protobuf:"fixed32,88,opt,name=pct_fg3a_corner,json=pctFg3aCorner,proto3" json:"pct_fg3a_corner,omitempty"`
	Fg3PctCorner     float32 `protobuf:"fixed32,89,opt,name=fg3_pct_corner,json=fg3PctCorner,proto3" json:"fg3_pct_corner,omitempty"`
	OppAvgDist       float32 `protobuf:"fixed32,90,opt,name=opp_avg_dist,json=oppAvgDist,proto3" json:"opp_avg_dist,omitempty"`
	OppPctFgaFg2A    float32 `protobuf:"fixed32,91,opt,name=opp_pct_fga_fg2a,json=oppPctFgaFg2a,proto3" json:"opp_pct_fga_fg2a,omitempty"`
	OppPctFga_00_03  float32 `protobuf:"fixed32,92,opt,name=opp_pct_fga_00_03,json=oppPctFga0003,proto3" json:"opp_pct_fga_00_03,omitempty"`
	OppPctFga_03_10  float32 `protobuf:"fixed32,93,opt,name=opp_pct_fga_03_10,json=oppPctFga0310,proto3" json:"opp_pct_fga_03_10,omitempty"`
	OppPctFga_10_16  float32 `protobuf:"fixed32,94,opt,name=opp_pct_fga_10_16,json=oppPctFga1016,proto3" json:"opp_pct_fga_10_16,omitempty"`
	OppPctFga_16Xx   float32 `protobuf:"fixed32,95,opt,name=opp_pct_fga_16_xx,json=oppPctFga16Xx,proto3" json:"opp_pct_fga_16_xx,omitempty"`
	OppPctFgaFg3A    float32 `protobuf:"fixed32,96,opt,name=opp_pct_fga_fg3a,json=oppPctFgaFg3a,proto3" json:"opp_pct_fga_fg3a,omitempty"`
	OppFgPct_00_03   float32 `protobuf:"fixed32,97,opt,name=opp_fg_pct_00_03,json=oppFgPct0003,proto3" json:"opp_fg_pct_00_03,omitempty"`
	OppFgPct_03_10   float32 `protobuf:"fixed32,98,opt,name=opp_fg_pct_03_10,json=oppFgPct0310,proto3" json:"opp_fg_pct_03_10,omitempty"`
	OppFgPct_10_16   float32 `protobuf:"fixed32,99,opt,name=opp_fg_pct_10_16,json=oppFgPct1016,proto3" json:"opp_fg_pct_10_16,omitempty"`
	OppFgPct_16Xx    float32 `protobuf:"fixed32,100,opt,name=opp_fg_pct_16_xx,json=oppFgPct16Xx,proto3" json:"opp_fg_pct_16_xx,omitempty"`
	OppPctAstFg2     float32 `protobuf:"fixed32,101,opt,name=opp_pct_ast_fg2,json=oppPctAstFg2,proto3" json:"opp_pct_ast_fg2,omitempty"`
	OppPctAstFg3     float32 `protobuf:"fixed32,102,opt,name=opp_pct_ast_fg3,json=oppPctAstFg3,proto3" json:"opp_pct_ast_fg3,omitempty"`
	OppPctFgaDunk    float32 `protobuf:"fixed32,103,opt,name=opp_pct_fga_dunk,json=oppPctFgaDunk,proto3" json:"opp_pct_fga_dunk,omitempty"`
	OppFgDunk        float32 `protobuf:"fixed32,104,opt,name=opp_fg_dunk,json=oppFgDunk,proto3" json:"opp_fg_dunk,omitempty"`
	OppPctFgaLayup   float32 `protobuf:"fixed32,105,opt,name=opp_pct_fga_layup,json=oppPctFgaLayup,proto3" json:"opp_pct_fga_layup,omitempty"`
	OppFgLayup       float32 `protobuf:"fixed32,106,opt,name=opp_fg_layup,json=oppFgLayup,proto3" json:"opp_fg_layup,omitempty"`
	OppPctFg3ACorner float32 `protobuf:"fixed32,107,opt,name=opp_pct_fg3a_corner,json=oppPctFg3aCorner,proto3" json:"opp_pct_fg3a_corner,omitempty"`
	OppFg3PctCorner  float32 `protobuf:"fixed32,108,opt,name=opp_fg3_pct_corner,json=oppFg3PctCorner,proto3" json:"opp_fg3_pct_corner,omitempty"`
}

func (x *Team) Reset() {
	*x = Team{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Team) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Team) ProtoMessage() {}

func (x *Team) ProtoReflect() protoreflect.Message {
	mi := &file_teams_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Team.ProtoReflect.Descriptor instead.
func (*Team) Descriptor() ([]byte, []int) {
	return file_teams_proto_rawDescGZIP(), []int{4}
}

func (x *Team) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Team) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Team) GetYear() float32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *Team) GetG() float32 {
	if x != nil {
		return x.G
	}
	return 0
}

func (x *Team) GetMp() float32 {
	if x != nil {
		return x.Mp
	}
	return 0
}

func (x *Team) GetFg() float32 {
	if x != nil {
		return x.Fg
	}
	return 0
}

func (x *Team) GetFga() float32 {
	if x != nil {
		return x.Fga
	}
	return 0
}

func (x *Team) GetFgPct() float32 {
	if x != nil {
		return x.FgPct
	}
	return 0
}

func (x *Team) GetFg3() float32 {
	if x != nil {
		return x.Fg3
	}
	return 0
}

func (x *Team) GetFg3A() float32 {
	if x != nil {
		return x.Fg3A
	}
	return 0
}

func (x *Team) GetFg3Pct() float32 {
	if x != nil {
		return x.Fg3Pct
	}
	return 0
}

func (x *Team) GetFg2() float32 {
	if x != nil {
		return x.Fg2
	}
	return 0
}

func (x *Team) GetFg2A() float32 {
	if x != nil {
		return x.Fg2A
	}
	return 0
}

func (x *Team) GetFg2Pct() float32 {
	if x != nil {
		return x.Fg2Pct
	}
	return 0
}

func (x *Team) GetFt() float32 {
	if x != nil {
		return x.Ft
	}
	return 0
}

func (x *Team) GetFta() float32 {
	if x != nil {
		return x.Fta
	}
	return 0
}

func (x *Team) GetFtPct() float32 {
	if x != nil {
		return x.FtPct
	}
	return 0
}

func (x *Team) GetOrb() float32 {
	if x != nil {
		return x.Orb
	}
	return 0
}

func (x *Team) GetDrb() float32 {
	if x != nil {
		return x.Drb
	}
	return 0
}

func (x *Team) GetTrb() float32 {
	if x != nil {
		return x.Trb
	}
	return 0
}

func (x *Team) GetAst() float32 {
	if x != nil {
		return x.Ast
	}
	return 0
}

func (x *Team) GetStl() float32 {
	if x != nil {
		return x.Stl
	}
	return 0
}

func (x *Team) GetBlk() float32 {
	if x != nil {
		return x.Blk
	}
	return 0
}

func (x *Team) GetTov() float32 {
	if x != nil {
		return x.Tov
	}
	return 0
}

func (x *Team) GetPf() float32 {
	if x != nil {
		return x.Pf
	}
	return 0
}

func (x *Team) GetPts() float32 {
	if x != nil {
		return x.Pts
	}
	return 0
}

func (x *Team) GetOppFg() float32 {
	if x != nil {
		return x.OppFg
	}
	return 0
}

func (x *Team) GetOppFga() float32 {
	if x != nil {
		return x.OppFga
	}
	return 0
}

func (x *Team) GetOppFgPct() float32 {
	if x != nil {
		return x.OppFgPct
	}
	return 0
}

func (x *Team) GetOppFg3() float32 {
	if x != nil {
		return x.OppFg3
	}
	return 0
}

func (x *Team) GetOppFg3A() float32 {
	if x != nil {
		return x.OppFg3A
	}
	return 0
}

func (x *Team) GetOppFg3Pct() float32 {
	if x != nil {
		return x.OppFg3Pct
	}
	return 0
}

func (x *Team) GetOppFg2() float32 {
	if x != nil {
		return x.OppFg2
	}
	return 0
}

func (x *Team) GetOppFg2A() float32 {
	if x != nil {
		return x.OppFg2A
	}
	return 0
}

func (x *Team) GetOppFg2Pct() float32 {
	if x != nil {
		return x.OppFg2Pct
	}
	return 0
}

func (x *Team) GetOppFt() float32 {
	if x != nil {
		return x.OppFt
	}
	return 0
}

func (x *Team) GetOppFta() float32 {
	if x != nil {
		return x.OppFta
	}
	return 0
}

func (x *Team) GetOppFtPct() float32 {
	if x != nil {
		return x.OppFtPct
	}
	return 0
}

func (x *Team) GetOppOrb() float32 {
	if x != nil {
		return x.OppOrb
	}
	return 0
}

func (x *Team) GetOppDrb() float32 {
	if x != nil {
		return x.OppDrb
	}
	return 0
}

func (x *Team) GetOppTrb() float32 {
	if x != nil {
		return x.OppTrb
	}
	return 0
}

func (x *Team) GetOppAst() float32 {
	if x != nil {
		return x.OppAst
	}
	return 0
}

func (x *Team) GetOppStl() float32 {
	if x != nil {
		return x.OppStl
	}
	return 0
}

func (x *Team) GetOppBlk() float32 {
	if x != nil {
		return x.OppBlk
	}
	return 0
}

func (x *Team) GetOppTov() float32 {
	if x != nil {
		return x.OppTov
	}
	return 0
}

func (x *Team) GetOppPf() float32 {
	if x != nil {
		return x.OppPf
	}
	return 0
}

func (x *Team) GetOppPts() float32 {
	if x != nil {
		return x.OppPts
	}
	return 0
}

func (x *Team) GetAge() float32 {
	if x != nil {
		return x.Age
	}
	return 0
}

func (x *Team) GetWins() float32 {
	if x != nil {
		return x.Wins
	}
	return 0
}

func (x *Team) GetLosses() float32 {
	if x != nil {
		return x.Losses
	}
	return 0
}

func (x *Team) GetWinsPyth() float32 {
	if x != nil {
		return x.WinsPyth
	}
	return 0
}

func (x *Team) GetLossesPyth() float32 {
	if x != nil {
		return x.LossesPyth
	}
	return 0
}

func (x *Team) GetMov() float32 {
	if x != nil {
		return x.Mov
	}
	return 0
}

func (x *Team) GetSos() float32 {
	if x != nil {
		return x.Sos
	}
	return 0
}

func (x *Team) GetSrs() float32 {
	if x != nil {
		return x.Srs
	}
	return 0
}

func (x *Team) GetOffRtg() float32 {
	if x != nil {
		return x.OffRtg
	}
	return 0
}

func (x *Team) GetDefRtg() float32 {
	if x != nil {
		return x.DefRtg
	}
	return 0
}

func (x *Team) GetNetRtg() float32 {
	if x != nil {
		return x.NetRtg
	}
	return 0
}

func (x *Team) GetPace() float32 {
	if x != nil {
		return x.Pace
	}
	return 0
}

func (x *Team) GetFtaPerFgaPct() float32 {
	if x != nil {
		return x.FtaPerFgaPct
	}
	return 0
}

func (x *Team) GetFg3APerFgaPct() float32 {
	if x != nil {
		return x.Fg3APerFgaPct
	}
	return 0
}

func (x *Team) GetTsPct() float32 {
	if x != nil {
		return x.TsPct
	}
	return 0
}

func (x *Team) GetEfgPct() float32 {
	if x != nil {
		return x.EfgPct
	}
	return 0
}

func (x *Team) GetTovPct() float32 {
	if x != nil {
		return x.TovPct
	}
	return 0
}

func (x *Team) GetOrbPct() float32 {
	if x != nil {
		return x.OrbPct
	}
	return 0
}

func (x *Team) GetFtRate() float32 {
	if x != nil {
		return x.FtRate
	}
	return 0
}

func (x *Team) GetOppEfgPct() float32 {
	if x != nil {
		return x.OppEfgPct
	}
	return 0
}

func (x *Team) GetOppTovPct() float32 {
	if x != nil {
		return x.OppTovPct
	}
	return 0
}

func (x *Team) GetDrbPct() float32 {
	if x != nil {
		return x.DrbPct
	}
	return 0
}

func (x *Team) GetOppFtRate() float32 {
	if x != nil {
		return x.OppFtRate
	}
	return 0
}

func (x *Team) GetAvgDist() float32 {
	if x != nil {
		return x.AvgDist
	}
	return 0
}

func (x *Team) GetPctFgaFg2A() float32 {
	if x != nil {
		return x.PctFgaFg2A
	}
	return 0
}

func (x *Team) GetPctFga_00_03() float32 {
	if x != nil {
		return x.PctFga_00_03
	}
	return 0
}

func (x *Team) GetPctFga_03_10() float32 {
	if x != nil {
		return x.PctFga_03_10
	}
	return 0
}

func (x *Team) GetPctFga_10_16() float32 {
	if x != nil {
		return x.PctFga_10_16
	}
	return 0
}

func (x *Team) GetPctFga_16Xx() float32 {
	if x != nil {
		return x.PctFga_16Xx
	}
	return 0
}

func (x *Team) GetPctFgaFg3A() float32 {
	if x != nil {
		return x.PctFgaFg3A
	}
	return 0
}

func (x *Team) GetFgPct_00_03() float32 {
	if x != nil {
		return x.FgPct_00_03
	}
	return 0
}

func (x *Team) GetFgPct_03_10() float32 {
	if x != nil {
		return x.FgPct_03_10
	}
	return 0
}

func (x *Team) GetFgPct_10_16() float32 {
	if x != nil {
		return x.FgPct_10_16
	}
	return 0
}

func (x *Team) GetFgPct_16Xx() float32 {
	if x != nil {
		return x.FgPct_16Xx
	}
	return 0
}

func (x *Team) GetPctAstFg2() float32 {
	if x != nil {
		return x.PctAstFg2
	}
	return 0
}

func (x *Team) GetPctAstFg3() float32 {
	if x != nil {
		return x.PctAstFg3
	}
	return 0
}

func (x *Team) GetPctFgaDunk() float32 {
	if x != nil {
		return x.PctFgaDunk
	}
	return 0
}

func (x *Team) GetFgDunk() float32 {
	if x != nil {
		return x.FgDunk
	}
	return 0
}

func (x *Team) GetPctFgaLayup() float32 {
	if x != nil {
		return x.PctFgaLayup
	}
	return 0
}

func (x *Team) GetFgLayup() float32 {
	if x != nil {
		return x.FgLayup
	}
	return 0
}

func (x *Team) GetPctFg3ACorner() float32 {
	if x != nil {
		return x.PctFg3ACorner
	}
	return 0
}

func (x *Team) GetFg3PctCorner() float32 {
	if x != nil {
		return x.Fg3PctCorner
	}
	return 0
}

func (x *Team) GetOppAvgDist() float32 {
	if x != nil {
		return x.OppAvgDist
	}
	return 0
}

func (x *Team) GetOppPctFgaFg2A() float32 {
	if x != nil {
		return x.OppPctFgaFg2A
	}
	return 0
}

func (x *Team) GetOppPctFga_00_03() float32 {
	if x != nil {
		return x.OppPctFga_00_03
	}
	return 0
}

func (x *Team) GetOppPctFga_03_10() float32 {
	if x != nil {
		return x.OppPctFga_03_10
	}
	return 0
}

func (x *Team) GetOppPctFga_10_16() float32 {
	if x != nil {
		return x.OppPctFga_10_16
	}
	return 0
}

func (x *Team) GetOppPctFga_16Xx() float32 {
	if x != nil {
		return x.OppPctFga_16Xx
	}
	return 0
}

func (x *Team) GetOppPctFgaFg3A() float32 {
	if x != nil {
		return x.OppPctFgaFg3A
	}
	return 0
}

func (x *Team) GetOppFgPct_00_03() float32 {
	if x != nil {
		return x.OppFgPct_00_03
	}
	return 0
}

func (x *Team) GetOppFgPct_03_10() float32 {
	if x != nil {
		return x.OppFgPct_03_10
	}
	return 0
}

func (x *Team) GetOppFgPct_10_16() float32 {
	if x != nil {
		return x.OppFgPct_10_16
	}
	return 0
}

func (x *Team) GetOppFgPct_16Xx() float32 {
	if x != nil {
		return x.OppFgPct_16Xx
	}
	return 0
}

func (x *Team) GetOppPctAstFg2() float32 {
	if x != nil {
		return x.OppPctAstFg2
	}
	return 0
}

func (x *Team) GetOppPctAstFg3() float32 {
	if x != nil {
		return x.OppPctAstFg3
	}
	return 0
}

func (x *Team) GetOppPctFgaDunk() float32 {
	if x != nil {
		return x.OppPctFgaDunk
	}
	return 0
}

func (x *Team) GetOppFgDunk() float32 {
	if x != nil {
		return x.OppFgDunk
	}
	return 0
}

func (x *Team) GetOppPctFgaLayup() float32 {
	if x != nil {
		return x.OppPctFgaLayup
	}
	return 0
}

func (x *Team) GetOppFgLayup() float32 {
	if x != nil {
		return x.OppFgLayup
	}
	return 0
}

func (x *Team) GetOppPctFg3ACorner() float32 {
	if x != nil {
		return x.OppPctFg3ACorner
	}
	return 0
}

func (x *Team) GetOppFg3PctCorner() float32 {
	if x != nil {
		return x.OppFg3PctCorner
	}
	return 0
}

// YearlyTeamData message represents yearly statistics for a team.
type YearlyTeamData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year      string `protobuf:"bytes,1,opt,name=year,proto3" json:"year,omitempty"`           // Year field
	Yearstats *Team  `protobuf:"bytes,2,opt,name=yearstats,proto3" json:"yearstats,omitempty"` // TeamData for the year
}

func (x *YearlyTeamData) Reset() {
	*x = YearlyTeamData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YearlyTeamData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YearlyTeamData) ProtoMessage() {}

func (x *YearlyTeamData) ProtoReflect() protoreflect.Message {
	mi := &file_teams_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YearlyTeamData.ProtoReflect.Descriptor instead.
func (*YearlyTeamData) Descriptor() ([]byte, []int) {
	return file_teams_proto_rawDescGZIP(), []int{5}
}

func (x *YearlyTeamData) GetYear() string {
	if x != nil {
		return x.Year
	}
	return ""
}

func (x *YearlyTeamData) GetYearstats() *Team {
	if x != nil {
		return x.Yearstats
	}
	return nil
}

// TotalTeamData message represents total statistics for a team.
type TotalTeamData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Teamname string            `protobuf:"bytes,1,opt,name=teamname,proto3" json:"teamname,omitempty"` // TeamName field
	Stats    []*YearlyTeamData `protobuf:"bytes,2,rep,name=stats,proto3" json:"stats,omitempty"`       // List of yearly statistics
}

func (x *TotalTeamData) Reset() {
	*x = TotalTeamData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TotalTeamData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TotalTeamData) ProtoMessage() {}

func (x *TotalTeamData) ProtoReflect() protoreflect.Message {
	mi := &file_teams_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TotalTeamData.ProtoReflect.Descriptor instead.
func (*TotalTeamData) Descriptor() ([]byte, []int) {
	return file_teams_proto_rawDescGZIP(), []int{6}
}

func (x *TotalTeamData) GetTeamname() string {
	if x != nil {
		return x.Teamname
	}
	return ""
}

func (x *TotalTeamData) GetStats() []*YearlyTeamData {
	if x != nil {
		return x.Stats
	}
	return nil
}

var File_teams_proto protoreflect.FileDescriptor

var file_teams_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x74,
	0x65, 0x61, 0x6d, 0x73, 0x22, 0x51, 0x0a, 0x0f, 0x54, 0x77, 0x6f, 0x54, 0x65, 0x61, 0x6d, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x31,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x31, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x65, 0x61, 0x6d, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x65,
	0x61, 0x6d, 0x32, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x22, 0x49, 0x0a, 0x0f, 0x41, 0x6c, 0x6c, 0x54, 0x65,
	0x61, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x59, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x59, 0x65, 0x61, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x59,
	0x65, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x59, 0x65,
	0x61, 0x72, 0x22, 0x58, 0x0a, 0x10, 0x54, 0x77, 0x6f, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x31, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x54, 0x65,
	0x61, 0x6d, 0x52, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x31, 0x12, 0x21, 0x0a, 0x05, 0x74, 0x65, 0x61,
	0x6d, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x74, 0x65, 0x61, 0x6d, 0x73,
	0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x32, 0x22, 0x3c, 0x0a, 0x10,
	0x41, 0x6c, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x65, 0x61, 0x6d,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xd7, 0x17, 0x0a, 0x04, 0x54,
	0x65, 0x61, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x0c, 0x0a, 0x01, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x6d, 0x70, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x02, 0x6d, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x66, 0x67, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x02, 0x66, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x67, 0x61,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x66, 0x67, 0x61, 0x12, 0x15, 0x0a, 0x06, 0x66,
	0x67, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x66, 0x67, 0x50,
	0x63, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x67, 0x33, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x03, 0x66, 0x67, 0x33, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x67, 0x33, 0x61, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x04, 0x66, 0x67, 0x33, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x67, 0x33, 0x5f,
	0x70, 0x63, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x66, 0x67, 0x33, 0x50, 0x63,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x67, 0x32, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03,
	0x66, 0x67, 0x32, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x67, 0x32, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x04, 0x66, 0x67, 0x32, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x67, 0x32, 0x5f, 0x70,
	0x63, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x66, 0x67, 0x32, 0x50, 0x63, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x66, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x02, 0x66, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x66, 0x74, 0x61, 0x18, 0x10, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x66,
	0x74, 0x61, 0x12, 0x15, 0x0a, 0x06, 0x66, 0x74, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x05, 0x66, 0x74, 0x50, 0x63, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x72, 0x62,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x6f, 0x72, 0x62, 0x12, 0x10, 0x0a, 0x03, 0x64,
	0x72, 0x62, 0x18, 0x13, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x64, 0x72, 0x62, 0x12, 0x10, 0x0a,
	0x03, 0x74, 0x72, 0x62, 0x18, 0x14, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x74, 0x72, 0x62, 0x12,
	0x10, 0x0a, 0x03, 0x61, 0x73, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x61, 0x73,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x74, 0x6c, 0x18, 0x16, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03,
	0x73, 0x74, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x6c, 0x6b, 0x18, 0x17, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x03, 0x62, 0x6c, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x6f, 0x76, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x03, 0x74, 0x6f, 0x76, 0x12, 0x0e, 0x0a, 0x02, 0x70, 0x66, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x02, 0x70, 0x66, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x74, 0x73, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x70, 0x74, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x70, 0x70,
	0x5f, 0x66, 0x67, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x6f, 0x70, 0x70, 0x46, 0x67,
	0x12, 0x17, 0x0a, 0x07, 0x6f, 0x70, 0x70, 0x5f, 0x66, 0x67, 0x61, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x06, 0x6f, 0x70, 0x70, 0x46, 0x67, 0x61, 0x12, 0x1c, 0x0a, 0x0a, 0x6f, 0x70, 0x70,
	0x5f, 0x66, 0x67, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6f,
	0x70, 0x70, 0x46, 0x67, 0x50, 0x63, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x70, 0x70, 0x5f, 0x66,
	0x67, 0x33, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x6f, 0x70, 0x70, 0x46, 0x67, 0x33,
	0x12, 0x19, 0x0a, 0x08, 0x6f, 0x70, 0x70, 0x5f, 0x66, 0x67, 0x33, 0x61, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x07, 0x6f, 0x70, 0x70, 0x46, 0x67, 0x33, 0x61, 0x12, 0x1e, 0x0a, 0x0b, 0x6f,
	0x70, 0x70, 0x5f, 0x66, 0x67, 0x33, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x09, 0x6f, 0x70, 0x70, 0x46, 0x67, 0x33, 0x50, 0x63, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6f,
	0x70, 0x70, 0x5f, 0x66, 0x67, 0x32, 0x18, 0x21, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x6f, 0x70,
	0x70, 0x46, 0x67, 0x32, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x70, 0x70, 0x5f, 0x66, 0x67, 0x32, 0x61,
	0x18, 0x22, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x6f, 0x70, 0x70, 0x46, 0x67, 0x32, 0x61, 0x12,
	0x1e, 0x0a, 0x0b, 0x6f, 0x70, 0x70, 0x5f, 0x66, 0x67, 0x32, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x23,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6f, 0x70, 0x70, 0x46, 0x67, 0x32, 0x50, 0x63, 0x74, 0x12,
	0x15, 0x0a, 0x06, 0x6f, 0x70, 0x70, 0x5f, 0x66, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x05, 0x6f, 0x70, 0x70, 0x46, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x70, 0x70, 0x5f, 0x66, 0x74,
	0x61, 0x18, 0x25, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x6f, 0x70, 0x70, 0x46, 0x74, 0x61, 0x12,
	0x1c, 0x0a, 0x0a, 0x6f, 0x70, 0x70, 0x5f, 0x66, 0x74, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x26, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x08, 0x6f, 0x70, 0x70, 0x46, 0x74, 0x50, 0x63, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x6f, 0x70, 0x70, 0x5f, 0x6f, 0x72, 0x62, 0x18, 0x27, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06,
	0x6f, 0x70, 0x70, 0x4f, 0x72, 0x62, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x70, 0x70, 0x5f, 0x64, 0x72,
	0x62, 0x18, 0x28, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x6f, 0x70, 0x70, 0x44, 0x72, 0x62, 0x12,
	0x17, 0x0a, 0x07, 0x6f, 0x70, 0x70, 0x5f, 0x74, 0x72, 0x62, 0x18, 0x29, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x06, 0x6f, 0x70, 0x70, 0x54, 0x72, 0x62, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x70, 0x70, 0x5f,
	0x61, 0x73, 0x74, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x6f, 0x70, 0x70, 0x41, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x70, 0x70, 0x5f, 0x73, 0x74, 0x6c, 0x18, 0x2b, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x06, 0x6f, 0x70, 0x70, 0x53, 0x74, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x70,
	0x70, 0x5f, 0x62, 0x6c, 0x6b, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x6f, 0x70, 0x70,
	0x42, 0x6c, 0x6b, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x70, 0x70, 0x5f, 0x74, 0x6f, 0x76, 0x18, 0x2d,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x6f, 0x70, 0x70, 0x54, 0x6f, 0x76, 0x12, 0x15, 0x0a, 0x06,
	0x6f, 0x70, 0x70, 0x5f, 0x70, 0x66, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x6f, 0x70,
	0x70, 0x50, 0x66, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x70, 0x70, 0x5f, 0x70, 0x74, 0x73, 0x18, 0x2f,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x6f, 0x70, 0x70, 0x50, 0x74, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x61, 0x67, 0x65, 0x18, 0x30, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x77, 0x69, 0x6e, 0x73, 0x18, 0x31, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x77, 0x69,
	0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x18, 0x32, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x06, 0x6c, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x69,
	0x6e, 0x73, 0x5f, 0x70, 0x79, 0x74, 0x68, 0x18, 0x33, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x77,
	0x69, 0x6e, 0x73, 0x50, 0x79, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x73, 0x73, 0x65,
	0x73, 0x5f, 0x70, 0x79, 0x74, 0x68, 0x18, 0x34, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x6c, 0x6f,
	0x73, 0x73, 0x65, 0x73, 0x50, 0x79, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x6f, 0x76, 0x18,
	0x35, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x6d, 0x6f, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x6f,
	0x73, 0x18, 0x36, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x73, 0x6f, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x73, 0x72, 0x73, 0x18, 0x37, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x73, 0x72, 0x73, 0x12, 0x17,
	0x0a, 0x07, 0x6f, 0x66, 0x66, 0x5f, 0x72, 0x74, 0x67, 0x18, 0x38, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x52, 0x74, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x5f, 0x72,
	0x74, 0x67, 0x18, 0x39, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x64, 0x65, 0x66, 0x52, 0x74, 0x67,
	0x12, 0x17, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x5f, 0x72, 0x74, 0x67, 0x18, 0x3a, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x06, 0x6e, 0x65, 0x74, 0x52, 0x74, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x70, 0x61, 0x63, 0x65, 0x12, 0x25, 0x0a,
	0x0f, 0x66, 0x74, 0x61, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x66, 0x67, 0x61, 0x5f, 0x70, 0x63, 0x74,
	0x18, 0x3c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x66, 0x74, 0x61, 0x50, 0x65, 0x72, 0x46, 0x67,
	0x61, 0x50, 0x63, 0x74, 0x12, 0x27, 0x0a, 0x10, 0x66, 0x67, 0x33, 0x61, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x66, 0x67, 0x61, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d,
	0x66, 0x67, 0x33, 0x61, 0x50, 0x65, 0x72, 0x46, 0x67, 0x61, 0x50, 0x63, 0x74, 0x12, 0x15, 0x0a,
	0x06, 0x74, 0x73, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x74,
	0x73, 0x50, 0x63, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x66, 0x67, 0x5f, 0x70, 0x63, 0x74, 0x18,
	0x3f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x65, 0x66, 0x67, 0x50, 0x63, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x74, 0x6f, 0x76, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x40, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06,
	0x74, 0x6f, 0x76, 0x50, 0x63, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x72, 0x62, 0x5f, 0x70, 0x63,
	0x74, 0x18, 0x41, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x6f, 0x72, 0x62, 0x50, 0x63, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x66, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x42, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x06, 0x66, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x6f, 0x70, 0x70, 0x5f,
	0x65, 0x66, 0x67, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x43, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6f,
	0x70, 0x70, 0x45, 0x66, 0x67, 0x50, 0x63, 0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x6f, 0x70, 0x70, 0x5f,
	0x74, 0x6f, 0x76, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x44, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6f,
	0x70, 0x70, 0x54, 0x6f, 0x76, 0x50, 0x63, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x72, 0x62, 0x5f,
	0x70, 0x63, 0x74, 0x18, 0x45, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x64, 0x72, 0x62, 0x50, 0x63,
	0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x6f, 0x70, 0x70, 0x5f, 0x66, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x46, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6f, 0x70, 0x70, 0x46, 0x74, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x76, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x18, 0x47, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x07, 0x61, 0x76, 0x67, 0x44, 0x69, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0c,
	0x70, 0x63, 0x74, 0x5f, 0x66, 0x67, 0x61, 0x5f, 0x66, 0x67, 0x32, 0x61, 0x18, 0x48, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0a, 0x70, 0x63, 0x74, 0x46, 0x67, 0x61, 0x46, 0x67, 0x32, 0x61, 0x12, 0x21,
	0x0a, 0x0d, 0x70, 0x63, 0x74, 0x5f, 0x66, 0x67, 0x61, 0x5f, 0x30, 0x30, 0x5f, 0x30, 0x33, 0x18,
	0x49, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x70, 0x63, 0x74, 0x46, 0x67, 0x61, 0x30, 0x30, 0x30,
	0x33, 0x12, 0x21, 0x0a, 0x0d, 0x70, 0x63, 0x74, 0x5f, 0x66, 0x67, 0x61, 0x5f, 0x30, 0x33, 0x5f,
	0x31, 0x30, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x70, 0x63, 0x74, 0x46, 0x67, 0x61,
	0x30, 0x33, 0x31, 0x30, 0x12, 0x21, 0x0a, 0x0d, 0x70, 0x63, 0x74, 0x5f, 0x66, 0x67, 0x61, 0x5f,
	0x31, 0x30, 0x5f, 0x31, 0x36, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x70, 0x63, 0x74,
	0x46, 0x67, 0x61, 0x31, 0x30, 0x31, 0x36, 0x12, 0x21, 0x0a, 0x0d, 0x70, 0x63, 0x74, 0x5f, 0x66,
	0x67, 0x61, 0x5f, 0x31, 0x36, 0x5f, 0x78, 0x78, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a,
	0x70, 0x63, 0x74, 0x46, 0x67, 0x61, 0x31, 0x36, 0x58, 0x78, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x63,
	0x74, 0x5f, 0x66, 0x67, 0x61, 0x5f, 0x66, 0x67, 0x33, 0x61, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0a, 0x70, 0x63, 0x74, 0x46, 0x67, 0x61, 0x46, 0x67, 0x33, 0x61, 0x12, 0x1f, 0x0a, 0x0c,
	0x66, 0x67, 0x5f, 0x70, 0x63, 0x74, 0x5f, 0x30, 0x30, 0x5f, 0x30, 0x33, 0x18, 0x4e, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x09, 0x66, 0x67, 0x50, 0x63, 0x74, 0x30, 0x30, 0x30, 0x33, 0x12, 0x1f, 0x0a,
	0x0c, 0x66, 0x67, 0x5f, 0x70, 0x63, 0x74, 0x5f, 0x30, 0x33, 0x5f, 0x31, 0x30, 0x18, 0x4f, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x09, 0x66, 0x67, 0x50, 0x63, 0x74, 0x30, 0x33, 0x31, 0x30, 0x12, 0x1f,
	0x0a, 0x0c, 0x66, 0x67, 0x5f, 0x70, 0x63, 0x74, 0x5f, 0x31, 0x30, 0x5f, 0x31, 0x36, 0x18, 0x50,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x66, 0x67, 0x50, 0x63, 0x74, 0x31, 0x30, 0x31, 0x36, 0x12,
	0x1f, 0x0a, 0x0c, 0x66, 0x67, 0x5f, 0x70, 0x63, 0x74, 0x5f, 0x31, 0x36, 0x5f, 0x78, 0x78, 0x18,
	0x51, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x66, 0x67, 0x50, 0x63, 0x74, 0x31, 0x36, 0x58, 0x78,
	0x12, 0x1e, 0x0a, 0x0b, 0x70, 0x63, 0x74, 0x5f, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x67, 0x32, 0x18,
	0x52, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x70, 0x63, 0x74, 0x41, 0x73, 0x74, 0x46, 0x67, 0x32,
	0x12, 0x1e, 0x0a, 0x0b, 0x70, 0x63, 0x74, 0x5f, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x67, 0x33, 0x18,
	0x53, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x70, 0x63, 0x74, 0x41, 0x73, 0x74, 0x46, 0x67, 0x33,
	0x12, 0x20, 0x0a, 0x0c, 0x70, 0x63, 0x74, 0x5f, 0x66, 0x67, 0x61, 0x5f, 0x64, 0x75, 0x6e, 0x6b,
	0x18, 0x54, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x70, 0x63, 0x74, 0x46, 0x67, 0x61, 0x44, 0x75,
	0x6e, 0x6b, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x67, 0x5f, 0x64, 0x75, 0x6e, 0x6b, 0x18, 0x55, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x06, 0x66, 0x67, 0x44, 0x75, 0x6e, 0x6b, 0x12, 0x22, 0x0a, 0x0d, 0x70,
	0x63, 0x74, 0x5f, 0x66, 0x67, 0x61, 0x5f, 0x6c, 0x61, 0x79, 0x75, 0x70, 0x18, 0x56, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0b, 0x70, 0x63, 0x74, 0x46, 0x67, 0x61, 0x4c, 0x61, 0x79, 0x75, 0x70, 0x12,
	0x19, 0x0a, 0x08, 0x66, 0x67, 0x5f, 0x6c, 0x61, 0x79, 0x75, 0x70, 0x18, 0x57, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x07, 0x66, 0x67, 0x4c, 0x61, 0x79, 0x75, 0x70, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x63,
	0x74, 0x5f, 0x66, 0x67, 0x33, 0x61, 0x5f, 0x63, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x18, 0x58, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0d, 0x70, 0x63, 0x74, 0x46, 0x67, 0x33, 0x61, 0x43, 0x6f, 0x72, 0x6e,
	0x65, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x67, 0x33, 0x5f, 0x70, 0x63, 0x74, 0x5f, 0x63, 0x6f,
	0x72, 0x6e, 0x65, 0x72, 0x18, 0x59, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x66, 0x67, 0x33, 0x50,
	0x63, 0x74, 0x43, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0c, 0x6f, 0x70, 0x70, 0x5f,
	0x61, 0x76, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a,
	0x6f, 0x70, 0x70, 0x41, 0x76, 0x67, 0x44, 0x69, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x10, 0x6f, 0x70,
	0x70, 0x5f, 0x70, 0x63, 0x74, 0x5f, 0x66, 0x67, 0x61, 0x5f, 0x66, 0x67, 0x32, 0x61, 0x18, 0x5b,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x6f, 0x70, 0x70, 0x50, 0x63, 0x74, 0x46, 0x67, 0x61, 0x46,
	0x67, 0x32, 0x61, 0x12, 0x28, 0x0a, 0x11, 0x6f, 0x70, 0x70, 0x5f, 0x70, 0x63, 0x74, 0x5f, 0x66,
	0x67, 0x61, 0x5f, 0x30, 0x30, 0x5f, 0x30, 0x33, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d,
	0x6f, 0x70, 0x70, 0x50, 0x63, 0x74, 0x46, 0x67, 0x61, 0x30, 0x30, 0x30, 0x33, 0x12, 0x28, 0x0a,
	0x11, 0x6f, 0x70, 0x70, 0x5f, 0x70, 0x63, 0x74, 0x5f, 0x66, 0x67, 0x61, 0x5f, 0x30, 0x33, 0x5f,
	0x31, 0x30, 0x18, 0x5d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x6f, 0x70, 0x70, 0x50, 0x63, 0x74,
	0x46, 0x67, 0x61, 0x30, 0x33, 0x31, 0x30, 0x12, 0x28, 0x0a, 0x11, 0x6f, 0x70, 0x70, 0x5f, 0x70,
	0x63, 0x74, 0x5f, 0x66, 0x67, 0x61, 0x5f, 0x31, 0x30, 0x5f, 0x31, 0x36, 0x18, 0x5e, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0d, 0x6f, 0x70, 0x70, 0x50, 0x63, 0x74, 0x46, 0x67, 0x61, 0x31, 0x30, 0x31,
	0x36, 0x12, 0x28, 0x0a, 0x11, 0x6f, 0x70, 0x70, 0x5f, 0x70, 0x63, 0x74, 0x5f, 0x66, 0x67, 0x61,
	0x5f, 0x31, 0x36, 0x5f, 0x78, 0x78, 0x18, 0x5f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x6f, 0x70,
	0x70, 0x50, 0x63, 0x74, 0x46, 0x67, 0x61, 0x31, 0x36, 0x58, 0x78, 0x12, 0x27, 0x0a, 0x10, 0x6f,
	0x70, 0x70, 0x5f, 0x70, 0x63, 0x74, 0x5f, 0x66, 0x67, 0x61, 0x5f, 0x66, 0x67, 0x33, 0x61, 0x18,
	0x60, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x6f, 0x70, 0x70, 0x50, 0x63, 0x74, 0x46, 0x67, 0x61,
	0x46, 0x67, 0x33, 0x61, 0x12, 0x26, 0x0a, 0x10, 0x6f, 0x70, 0x70, 0x5f, 0x66, 0x67, 0x5f, 0x70,
	0x63, 0x74, 0x5f, 0x30, 0x30, 0x5f, 0x30, 0x33, 0x18, 0x61, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c,
	0x6f, 0x70, 0x70, 0x46, 0x67, 0x50, 0x63, 0x74, 0x30, 0x30, 0x30, 0x33, 0x12, 0x26, 0x0a, 0x10,
	0x6f, 0x70, 0x70, 0x5f, 0x66, 0x67, 0x5f, 0x70, 0x63, 0x74, 0x5f, 0x30, 0x33, 0x5f, 0x31, 0x30,
	0x18, 0x62, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x6f, 0x70, 0x70, 0x46, 0x67, 0x50, 0x63, 0x74,
	0x30, 0x33, 0x31, 0x30, 0x12, 0x26, 0x0a, 0x10, 0x6f, 0x70, 0x70, 0x5f, 0x66, 0x67, 0x5f, 0x70,
	0x63, 0x74, 0x5f, 0x31, 0x30, 0x5f, 0x31, 0x36, 0x18, 0x63, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c,
	0x6f, 0x70, 0x70, 0x46, 0x67, 0x50, 0x63, 0x74, 0x31, 0x30, 0x31, 0x36, 0x12, 0x26, 0x0a, 0x10,
	0x6f, 0x70, 0x70, 0x5f, 0x66, 0x67, 0x5f, 0x70, 0x63, 0x74, 0x5f, 0x31, 0x36, 0x5f, 0x78, 0x78,
	0x18, 0x64, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x6f, 0x70, 0x70, 0x46, 0x67, 0x50, 0x63, 0x74,
	0x31, 0x36, 0x58, 0x78, 0x12, 0x25, 0x0a, 0x0f, 0x6f, 0x70, 0x70, 0x5f, 0x70, 0x63, 0x74, 0x5f,
	0x61, 0x73, 0x74, 0x5f, 0x66, 0x67, 0x32, 0x18, 0x65, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x6f,
	0x70, 0x70, 0x50, 0x63, 0x74, 0x41, 0x73, 0x74, 0x46, 0x67, 0x32, 0x12, 0x25, 0x0a, 0x0f, 0x6f,
	0x70, 0x70, 0x5f, 0x70, 0x63, 0x74, 0x5f, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x67, 0x33, 0x18, 0x66,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x6f, 0x70, 0x70, 0x50, 0x63, 0x74, 0x41, 0x73, 0x74, 0x46,
	0x67, 0x33, 0x12, 0x27, 0x0a, 0x10, 0x6f, 0x70, 0x70, 0x5f, 0x70, 0x63, 0x74, 0x5f, 0x66, 0x67,
	0x61, 0x5f, 0x64, 0x75, 0x6e, 0x6b, 0x18, 0x67, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x6f, 0x70,
	0x70, 0x50, 0x63, 0x74, 0x46, 0x67, 0x61, 0x44, 0x75, 0x6e, 0x6b, 0x12, 0x1e, 0x0a, 0x0b, 0x6f,
	0x70, 0x70, 0x5f, 0x66, 0x67, 0x5f, 0x64, 0x75, 0x6e, 0x6b, 0x18, 0x68, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x09, 0x6f, 0x70, 0x70, 0x46, 0x67, 0x44, 0x75, 0x6e, 0x6b, 0x12, 0x29, 0x0a, 0x11, 0x6f,
	0x70, 0x70, 0x5f, 0x70, 0x63, 0x74, 0x5f, 0x66, 0x67, 0x61, 0x5f, 0x6c, 0x61, 0x79, 0x75, 0x70,
	0x18, 0x69, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x6f, 0x70, 0x70, 0x50, 0x63, 0x74, 0x46, 0x67,
	0x61, 0x4c, 0x61, 0x79, 0x75, 0x70, 0x12, 0x20, 0x0a, 0x0c, 0x6f, 0x70, 0x70, 0x5f, 0x66, 0x67,
	0x5f, 0x6c, 0x61, 0x79, 0x75, 0x70, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x6f, 0x70,
	0x70, 0x46, 0x67, 0x4c, 0x61, 0x79, 0x75, 0x70, 0x12, 0x2d, 0x0a, 0x13, 0x6f, 0x70, 0x70, 0x5f,
	0x70, 0x63, 0x74, 0x5f, 0x66, 0x67, 0x33, 0x61, 0x5f, 0x63, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x18,
	0x6b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x6f, 0x70, 0x70, 0x50, 0x63, 0x74, 0x46, 0x67, 0x33,
	0x61, 0x43, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x12, 0x6f, 0x70, 0x70, 0x5f, 0x66,
	0x67, 0x33, 0x5f, 0x70, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x18, 0x6c, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0f, 0x6f, 0x70, 0x70, 0x46, 0x67, 0x33, 0x50, 0x63, 0x74, 0x43, 0x6f,
	0x72, 0x6e, 0x65, 0x72, 0x22, 0x4f, 0x0a, 0x0e, 0x59, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x54, 0x65,
	0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x29, 0x0a, 0x09, 0x79, 0x65,
	0x61, 0x72, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x74, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x09, 0x79, 0x65, 0x61, 0x72,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x22, 0x58, 0x0a, 0x0d, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x65,
	0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x59, 0x65, 0x61, 0x72, 0x6c, 0x79,
	0x54, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x32,
	0x8e, 0x01, 0x0a, 0x0c, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x3e, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x54, 0x77, 0x6f, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x12,
	0x16, 0x2e, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x54, 0x77, 0x6f, 0x54, 0x65, 0x61, 0x6d, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2e,
	0x54, 0x77, 0x6f, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3e, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x12,
	0x16, 0x2e, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x41, 0x6c, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2e,
	0x41, 0x6c, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x2e, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x70, 0x62, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_teams_proto_rawDescOnce sync.Once
	file_teams_proto_rawDescData = file_teams_proto_rawDesc
)

func file_teams_proto_rawDescGZIP() []byte {
	file_teams_proto_rawDescOnce.Do(func() {
		file_teams_proto_rawDescData = protoimpl.X.CompressGZIP(file_teams_proto_rawDescData)
	})
	return file_teams_proto_rawDescData
}

var file_teams_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_teams_proto_goTypes = []any{
	(*TwoTeamsRequest)(nil),  // 0: teams.TwoTeamsRequest
	(*AllTeamsRequest)(nil),  // 1: teams.AllTeamsRequest
	(*TwoTeamsResponse)(nil), // 2: teams.TwoTeamsResponse
	(*AllTeamsResponse)(nil), // 3: teams.AllTeamsResponse
	(*Team)(nil),             // 4: teams.Team
	(*YearlyTeamData)(nil),   // 5: teams.YearlyTeamData
	(*TotalTeamData)(nil),    // 6: teams.TotalTeamData
}
var file_teams_proto_depIdxs = []int32{
	4, // 0: teams.TwoTeamsResponse.team1:type_name -> teams.Team
	4, // 1: teams.TwoTeamsResponse.team2:type_name -> teams.Team
	6, // 2: teams.AllTeamsResponse.data:type_name -> teams.TotalTeamData
	4, // 3: teams.YearlyTeamData.yearstats:type_name -> teams.Team
	5, // 4: teams.TotalTeamData.stats:type_name -> teams.YearlyTeamData
	0, // 5: teams.TeamsService.GetTwoTeams:input_type -> teams.TwoTeamsRequest
	1, // 6: teams.TeamsService.GetAllTeams:input_type -> teams.AllTeamsRequest
	2, // 7: teams.TeamsService.GetTwoTeams:output_type -> teams.TwoTeamsResponse
	3, // 8: teams.TeamsService.GetAllTeams:output_type -> teams.AllTeamsResponse
	7, // [7:9] is the sub-list for method output_type
	5, // [5:7] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_teams_proto_init() }
func file_teams_proto_init() {
	if File_teams_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_teams_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*TwoTeamsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*AllTeamsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*TwoTeamsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*AllTeamsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*Team); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*YearlyTeamData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*TotalTeamData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_teams_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_teams_proto_goTypes,
		DependencyIndexes: file_teams_proto_depIdxs,
		MessageInfos:      file_teams_proto_msgTypes,
	}.Build()
	File_teams_proto = out.File
	file_teams_proto_rawDesc = nil
	file_teams_proto_goTypes = nil
	file_teams_proto_depIdxs = nil
}
